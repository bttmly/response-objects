export interface BaseResponseObject<T> {
    body: T;
    status: number;
    headers?: object;
}
export interface ResponseObject<T> extends BaseResponseObject<T> {
    statusCode: number;
    toJSON(): BaseResponseObject<T>;
    toString(): string;
}
export interface ErrorResponseObject<T> extends ResponseObject<T>, Error {
}
export interface Headers {
    [header: string]: number | string | string[] | undefined;
}
declare function R<T>(code: number, body?: T, headers?: Headers): ResponseObject<T>;
declare namespace R {
    function Continue<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function SwitchingProtocols<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function Processing<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function EarlyHints<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function OK<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function Created<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function Accepted<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function NonAuthoritativeInformation<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function NoContent<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function ResetContent<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function PartialContent<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function MultiStatus<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function AlreadyReported<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function IMUsed<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function MultipleChoices<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function MovedPermanently<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function Found<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function SeeOther<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function NotModified<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function UseProxy<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function TemporaryRedirect<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function PermanentRedirect<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function BadRequest<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function Unauthorized<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function PaymentRequired<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function Forbidden<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function NotFound<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function MethodNotAllowed<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function NotAcceptable<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function ProxyAuthenticationRequired<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function RequestTimeout<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function Conflict<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function Gone<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function LengthRequired<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function PreconditionFailed<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function PayloadTooLarge<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function URITooLong<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function UnsupportedMediaType<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function RangeNotSatisfiable<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function ExpectationFailed<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function MisdirectedRequest<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function UnprocessableEntity<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function Locked<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function FailedDependency<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function UnorderedCollection<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function UpgradeRequired<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function PreconditionRequired<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function TooManyRequests<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function RequestHeaderFieldsTooLarge<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function UnavailableForLegalReasons<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function InternalServerError<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function NotImplemented<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function BadGateway<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function ServiceUnavailable<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function GatewayTimeout<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function HTTPVersionNotSupported<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function VariantAlsoNegotiates<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function InsufficientStorage<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function LoopDetected<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function BandwidthLimitExceeded<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function NotExtended<T>(body?: T, headers?: Headers): ResponseObject<T>;
    function NetworkAuthenticationRequired<T>(body?: T, headers?: Headers): ResponseObject<T>;
    const Ok: typeof OK;
}
export default R;
export declare function Continue<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function SwitchingProtocols<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function Processing<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function EarlyHints<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function OK<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function Created<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function Accepted<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function NonAuthoritativeInformation<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function NoContent<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function ResetContent<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function PartialContent<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function MultiStatus<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function AlreadyReported<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function IMUsed<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function MultipleChoices<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function MovedPermanently<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function Found<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function SeeOther<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function NotModified<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function UseProxy<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function TemporaryRedirect<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function PermanentRedirect<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function BadRequest<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function Unauthorized<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function PaymentRequired<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function Forbidden<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function NotFound<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function MethodNotAllowed<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function NotAcceptable<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function ProxyAuthenticationRequired<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function RequestTimeout<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function Conflict<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function Gone<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function LengthRequired<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function PreconditionFailed<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function PayloadTooLarge<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function URITooLong<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function UnsupportedMediaType<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function RangeNotSatisfiable<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function ExpectationFailed<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function MisdirectedRequest<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function UnprocessableEntity<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function Locked<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function FailedDependency<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function UnorderedCollection<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function UpgradeRequired<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function PreconditionRequired<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function TooManyRequests<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function RequestHeaderFieldsTooLarge<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function UnavailableForLegalReasons<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function InternalServerError<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function NotImplemented<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function BadGateway<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function ServiceUnavailable<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function GatewayTimeout<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function HTTPVersionNotSupported<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function VariantAlsoNegotiates<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function InsufficientStorage<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function LoopDetected<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function BandwidthLimitExceeded<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function NotExtended<T>(body?: T, headers?: Headers): ResponseObject<T>;
export declare function NetworkAuthenticationRequired<T>(body?: T, headers?: Headers): ResponseObject<T>;
